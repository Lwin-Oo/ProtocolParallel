# Day 1: Foundations of Modern C++ (Engraved)

## 🧠 Core Concepts Explored

| Concept              | Purpose                                               |
| -------------------- | ----------------------------------------------------- |
| `struct`             | Organize each contact as a data unit                  |
| `std::vector`        | Store an expandable list of contacts                  |
| `auto`               | Infer types automatically                             |
| `for(auto& x : vec)` | Modern loop syntax to avoid copies                    |
| `cin` / `cout`       | Basic I/O for user interaction                        |
| `RAII`               | Memory/resources managed by object lifetime, no leaks |

---

## 🔹 `#include <iostream>`

* Preprocessor directive to include input/output stream tools:

  * `std::cout` → Output to terminal
  * `std::cin` → Input from user

💡 Enables interaction via terminal.

---

## 🔹 `#include <vector>`

* Grants access to `std::vector`, a resizable array with built-in memory management.

💡 C++ standard container that expands dynamically.

---

## 🔹 `#include <string>`

* Provides access to `std::string`:

  * Manages heap memory automatically
  * Provides utility functions like `.size()`, `.append()`

---

## 🔹 Struct Definition

```cpp
struct Contact {
    std::string name;
    std::string phone;
};
```

* Composite data type grouping name and phone.
* Internally stores two dynamic strings.

---

## 🔹 Display Contacts Function

```cpp
void displayContacts(const std::vector<Contact>& contacts) {
    for (const auto& contact : contacts) {
        std::cout << "-" << contact.name << "(" << contact.phone << ")\n";
    }
}
```

* Pass by `const&`: avoids copying, prevents mutation.
* `auto&`: avoids copying per loop.

---

## 🔹 Main Function Walkthrough

```cpp
int main() {
    std::vector<Contact> contacts;
```

* Vector initialized (stack object managing heap memory).

```cpp
    while (true) {
        std::cout << "\n[1] Add Contact\n[2] Show All\n[3] Exit\n> ";
        int choice;
        std::cin >> choice;
```

* Menu loop for user interaction.

### 🧩 Add Contact:

```cpp
if (choice == 1) {
    Contact c;
    std::cin >> c.name;
    std::cin >> c.phone;
    contacts.push_back(c);
```

* Contact stored, vector expands if needed.

### 📋 Show Contacts:

```cpp
} else if (choice == 2) {
    displayContacts(contacts);
```

### 🚪 Exit Program:

```cpp
} else if (choice == 3) {
    break;
```

### ❌ Invalid Input:

```cpp
} else {
    std::cout << "Invalid Option\n";
}
```

---

## 🧠 Memory Model Recap

### Stack:

* `contacts` vector controller
* `choice` int
* temporary `Contact c`

### Heap:

* Internal array of `Contact` objects
* Strings `name` and `phone`, each with their own buffers

---

## 🧠 Passing Vectors: Reference vs Copy

```cpp
void addContact(std::vector<Contact> contacts);  // ❌ Copies entire vector
void addContact(std::vector<Contact>& contacts); // ✅ Works with existing vector
```

| Context                         | `&` Needed? | Why                    |
| ------------------------------- | ----------- | ---------------------- |
| Defining a vector               | ❌           | You’re the owner       |
| Passing to a function           | ✅           | Avoid full copy        |
| Returning a local vector by `&` | ❌ Danger!   | May cause dangling ref |

---

## 🧠 Looping Rule Engraved

> “When looping a container, default to `auto&`. Only use `auto` if you want a copy.”

### Loop Syntax Table

| Intent           | Syntax        | Why                                   |
| ---------------- | ------------- | ------------------------------------- |
| Modify elements  | `auto&`       | Direct access to memory, no copy      |
| Read-only access | `const auto&` | Prevents change, avoids copy          |
| Intentional copy | `auto`        | Creates duplicates (only when needed) |

---

### Bad Loop Example

```cpp
for (auto x : contacts) {
    x.name = "Anon"; // modifies copy
}
```

### Good Loop Example

```cpp
for (auto& x : contacts) {
    x.name = "Anon"; // modifies real element
}
```

---

## 🛡️ Const Engraved in Brain

### Core Rule:

> “Use `const` to protect what must never be changed.”

### Common Usages:

1. **Read-Only Looping**

```cpp
for (const auto& item : list)
```

2. **Function Parameters**

```cpp
void show(const Contact& c);
```

3. **Configuration Values**

```cpp
const int MAX_USERS = 1000;
```

4. **Pointers and Const**

| Syntax               | Meaning                          |
| -------------------- | -------------------------------- |
| `const int* p`       | pointer to const int             |
| `int* const p`       | const pointer to int             |
| `const int* const p` | both pointer and value are const |

---

### Const Litmus Test

> “Do I want to ensure this never changes?” → Use `const`

---

## TL;DR:

* Use `auto&` when looping by reference
* Use `const auto&` when reading only
* Avoid `auto` unless you intend to copy
* Use `const` to lock down values, avoid accidents, and clarify intent
* Default to passing by `const&` unless mutation or copy is intentional
