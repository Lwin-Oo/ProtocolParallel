# 🚀 Day 5: Advanced Memory Management, Ownership, and Allocators in Modern C++

> **Goal:** Master how memory is laid out, how it's owned, and how to control it with precision using Modern C++ tools. These concepts are foundational for parallel computing and systems programming.

---

## 🏠 Memory Regions in C++: Stack, Heap, Static

### 🔹 Stack

* **Definition:** The stack is a region of memory used for **local variables** and **function call management**.
* **Access Speed:** Extremely fast due to LIFO (Last-In-First-Out) structure.
* **Automatic Management:** Memory is released when scope ends.
* **Stored on:** CPU registers + cache (when possible).

```cpp
void example() {
    int x = 42;  // Allocated on the stack
}  // x is destroyed here
```

### 🔹 Heap

* **Definition:** Dynamically allocated memory at runtime.
* **Access Speed:** Slower than stack due to allocation overhead.
* **Manual/Semi-automatic Management:** Needs `new/delete` or smart pointers.
* **Stored in:** Global dynamic memory area.

```cpp
int* ptr = new int(5); // Allocated on heap
```

* Must be released manually:

```cpp
delete ptr; // without this = memory leak
```

### 🔹 Static/Global

* **Definition:** Memory that persists for the lifetime of the program.
* **Use Case:** Global variables, static inside functions.

```cpp
static int counter = 0;  // Exists from start to end
```

### 🔍 Stack vs Heap vs Static

| Feature      | Stack       | Heap               | Static/Global     |
| ------------ | ----------- | ------------------ | ----------------- |
| Lifetime     | Scoped      | Manual / Smart     | Entire Program    |
| Access Speed | ✅ Fast      | ⚠️ Slower          | ✅ Fast            |
| Ownership    | Function    | Explicit           | Global/Module     |
| Use Cases    | Local logic | Dynamic structures | Counters, buffers |

---

## 🧭 Ownership Models in Modern C++

### 🔸 Unique Ownership: `std::unique_ptr<T>`

* **Concept:** Only one owner of a resource.
* **Auto-deletes** when the `unique_ptr` goes out of scope.
* **Cannot be copied**, only moved.

```cpp
auto ptr = std::make_unique<int>(10); // owns memory
```

### 🔸 Shared Ownership: `std::shared_ptr<T>`

* **Concept:** Multiple smart pointers can co-own a resource.
* **Reference counting:** Automatically deleted when last owner goes out of scope.

```cpp
auto p1 = std::make_shared<Contact>("Alice");
auto p2 = p1; // both own the object
```

### 🔸 Non-Owning: `std::weak_ptr<T>`

* **Observer-only:** Doesn't increase ref count.
* **Used to avoid cycles** in shared structures.
* Access with `.lock()` to get a temporary shared\_ptr.

```cpp
std::weak_ptr<Contact> w = p1; // observe only
```

---

## ⚠️ Manual Memory with `new` / `delete`

```cpp
int* arr = new int[100];  // Allocated on heap
// use arr...
delete[] arr;  // Must be called to prevent leak
```

### 🚨 Risks

| Problem          | Description                     |
| ---------------- | ------------------------------- |
| Memory Leak      | Forgetting `delete`             |
| Dangling Pointer | Using memory after it's deleted |
| Double Deletion  | Deleting same pointer twice     |
| Exception Unsafe | Early exits skip `delete` calls |

### ✅ Safer Alternative

* Always prefer `unique_ptr` or `shared_ptr` unless you **must** use manual memory for low-level control.

---

## ✨ Placement New

**Constructs an object at a specific memory location** (pre-allocated buffer).

```cpp
char buffer[sizeof(Contact)];
Contact* c = new (buffer) Contact("Alice", "123"); // placement new
```

* Avoids heap allocation.
* Used in embedded, game engines, real-time systems.
* Must **manually call destructor**:

```cpp
c->~Contact();
```

---

## 🧰 Custom Allocators (Advanced Topic)

### 🧩 What Are They?

* Allocators let you control **how memory is allocated** in STL containers.
* Custom allocators override how `vector`, `map`, etc. get memory.

```cpp
std::vector<int, MyCustomAllocator<int>> myVec;
```

### 🚀 Why Use Them?

| Reason                  | Explanation                                 |
| ----------------------- | ------------------------------------------- |
| Performance             | Tailor alloc for alignment / cache behavior |
| Memory Pooling          | Reuse large chunks to reduce fragmentation  |
| Deterministic Lifetimes | Control object destruction explicitly       |
| Embedded Systems        | Avoid default heap usage entirely           |

> Modern libraries (Boost, EASTL, etc.) use allocators for precise performance control.

---

## 🧠 Summary Tables

### 🔹 Memory Zones

| Region | Description                       | Use Case           |
| ------ | --------------------------------- | ------------------ |
| Stack  | Fast, scoped memory               | Local vars, calls  |
| Heap   | Dynamically allocated, slow       | Long-lived objects |
| Static | Global lifetime, initialized once | Counters, caches   |

### 🔹 Ownership Summary

| Type     | Smart Pointer   | Copyable | Auto Deletes | Thread Safe |
| -------- | --------------- | -------- | ------------ | ----------- |
| Unique   | `unique_ptr<T>` | ❌        | ✅            | ❌ (usually) |
| Shared   | `shared_ptr<T>` | ✅        | ✅            | ✅           |
| Observer | `weak_ptr<T>`   | ❌        | ❌            | ✅           |
| Manual   | Raw Pointer     | ✅        | ❌            | ❌           |

---

## 🔧 Real-World Use Case Breakdown

| Scenario                         | Recommendation            | Reason                                           |
| -------------------------------- | ------------------------- | ------------------------------------------------ |
| Embedded systems / RTOS          | `placement new` / pools   | Minimize heap usage, deterministic memory access |
| Game dev / frame allocators      | Custom allocator          | Fast memory recycling every frame                |
| Desktop app logic                | `unique_ptr`              | Ownership clarity, exception safety              |
| Plugin / shared ownership system | `shared_ptr` + `weak_ptr` | Shared lifetimes with safe non-owning refs       |

---

## 🧠 Final Thoughts

> If you understand where things live, how long they live, and who owns them — you can write **bug-free**, **high-performance**, **parallel-safe** C++ systems.

This is your gateway to hardware-level development, parallel computing, and embedded programming mastery.
